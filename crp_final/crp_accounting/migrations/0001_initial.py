# Generated by Django 5.2 on 2025-04-28 06:14

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AccountGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, help_text='Unique name for the account group (e.g., Current Assets, Operating Expenses).', max_length=150, unique=True, verbose_name='Group Name')),
                ('description', models.TextField(blank=True, help_text="Optional description of the account group's purpose.", verbose_name='Description')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('parent_group', models.ForeignKey(blank=True, help_text='Assign parent for hierarchy. Leave blank for top-level.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='sub_groups', to='crp_accounting.accountgroup', verbose_name='Parent Group')),
            ],
            options={
                'verbose_name': 'Account Group',
                'verbose_name_plural': 'Account Groups',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account_number', models.CharField(db_index=True, help_text='Unique identifier code for the account (e.g., 10100, 40001).', max_length=50, unique=True, verbose_name='Account Number')),
                ('account_name', models.CharField(db_index=True, help_text='Human-readable name (e.g., Cash On Hand, Sales Revenue - Services).', max_length=255, verbose_name='Account Name')),
                ('description', models.TextField(blank=True, help_text="Optional detailed description of the account's purpose.", verbose_name='Description')),
                ('account_type', models.CharField(choices=[('ASSET', 'Asset'), ('LIABILITY', 'Liability'), ('EQUITY', 'Equity'), ('INCOME', 'Income'), ('EXPENSE', 'Expense'), ('COGS', 'Cost of Goods Sold')], db_index=True, help_text='Fundamental accounting classification (Asset, Liability, etc.).', max_length=20, verbose_name='Account Type')),
                ('account_nature', models.CharField(choices=[('DEBIT', 'Debit'), ('CREDIT', 'Credit')], editable=False, help_text='System-inferred nature (Debit/Credit). Based on Account Type.', max_length=10, verbose_name='Account Nature')),
                ('pl_section', models.CharField(blank=True, choices=[('REVENUE', 'Revenue'), ('COGS', 'Cost of Goods Sold'), ('OPERATING_EXPENSE', 'Operating Expense'), ('OTHER_INCOME', 'Other Income'), ('OTHER_EXPENSE', 'Other Expense'), ('TAX_EXPENSE', 'Tax Expense'), ('DEPR_AMORT', 'Depreciation & Amortization'), ('NONE', 'Not Applicable (Balance Sheet)')], db_index=True, default='NONE', help_text='Specific section classification for the Profit & Loss statement (e.g., Revenue, COGS, Operating Expense). Required for detailed P&L structure.', max_length=25, verbose_name='P&L Section')),
                ('currency', models.CharField(choices=[('USD', 'US Dollar'), ('EUR', 'Euro'), ('INR', 'Indian Rupee'), ('GBP', 'British Pound'), ('AED', 'UAE Dirham'), ('JPY', 'Japanese Yen'), ('CAD', 'Canadian Dollar'), ('AUD', 'Australian Dollar'), ('CHF', 'Swiss Franc'), ('CNY', 'Chinese Yuan Renminbi'), ('SGD', 'Singapore Dollar'), ('HKD', 'Hong Kong Dollar'), ('NZD', 'New Zealand Dollar'), ('OTHER', 'Other')], default='USD', help_text='Primary currency for transactions posted to this account.', max_length=10, verbose_name='Currency')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Inactive accounts cannot be selected for new transactions.', verbose_name='Is Active')),
                ('allow_direct_posting', models.BooleanField(default=True, help_text='Can journal entries be posted directly to this account? (False for summary accounts).', verbose_name='Allow Direct Posting')),
                ('is_control_account', models.BooleanField(default=False, help_text='Mark True if this account summarizes a subsidiary ledger (e.g., Accounts Receivable).', verbose_name='Is Control Account')),
                ('control_account_party_type', models.CharField(blank=True, choices=[('CUSTOMER', 'Customer'), ('SUPPLIER', 'Supplier'), ('EMPLOYEE', 'Employee'), ('OTHER', 'Other'), ('BANK', 'Bank'), ('GOVERNMENT', 'Government Agency'), ('INVESTOR', 'Investor/Shareholder'), ('INTERCOMPANY', 'Intercompany')], db_index=True, help_text='If Control Account, specify which Party Type it controls (e.g., CUSTOMER).', max_length=20, null=True, verbose_name='Control Account Party Type')),
                ('current_balance', models.DecimalField(decimal_places=2, default=Decimal('0.00'), editable=False, help_text='Calculated current balance based on posted transactions (updated asynchronously).', max_digits=20, verbose_name='Current Balance')),
                ('balance_last_updated', models.DateTimeField(blank=True, editable=False, help_text='Timestamp when current_balance was last recalculated.', null=True, verbose_name='Balance Last Updated')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('account_group', models.ForeignKey(help_text='The hierarchical group this account belongs to.', on_delete=django.db.models.deletion.PROTECT, related_name='accounts', to='crp_accounting.accountgroup', verbose_name='Account Group')),
            ],
            options={
                'verbose_name': 'Account',
                'verbose_name_plural': 'Accounts',
                'ordering': ['account_group__name', 'account_number'],
                'permissions': [('view_financial_reports', 'Can view financial reports')],
            },
        ),
        migrations.CreateModel(
            name='FiscalYear',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Label for the fiscal year (e.g., 2024-2025)', max_length=100, unique=True)),
                ('start_date', models.DateField(help_text='Start date of the fiscal year.')),
                ('end_date', models.DateField(help_text='End date of the fiscal year.')),
                ('is_active', models.BooleanField(default=False, help_text='Only one fiscal year can be active at a time.')),
                ('status', models.CharField(choices=[('Open', 'Open'), ('Locked', 'Locked'), ('Closed', 'Closed')], default='Open', help_text='Operational status of the fiscal year.', max_length=20)),
                ('closed_at', models.DateTimeField(blank=True, help_text='Timestamp when the fiscal year was closed.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('closed_by', models.ForeignKey(blank=True, help_text='User who closed the year.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Fiscal Year',
                'verbose_name_plural': 'Fiscal Years',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='AccountingPeriod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(help_text='The start date of the accounting period.')),
                ('end_date', models.DateField(help_text='The end date of the accounting period.')),
                ('locked', models.BooleanField(default=False, help_text='Indicates whether the period is locked and no more entries are allowed.')),
                ('fiscal_year', models.ForeignKey(help_text='The fiscal year to which this period belongs.', on_delete=django.db.models.deletion.CASCADE, related_name='periods', to='crp_accounting.fiscalyear')),
            ],
            options={
                'verbose_name': 'Accounting Period',
                'verbose_name_plural': 'Accounting Periods',
            },
        ),
        migrations.CreateModel(
            name='Party',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('party_type', models.CharField(choices=[('CUSTOMER', 'Customer'), ('SUPPLIER', 'Supplier'), ('EMPLOYEE', 'Employee'), ('OTHER', 'Other'), ('BANK', 'Bank'), ('GOVERNMENT', 'Government Agency'), ('INVESTOR', 'Investor/Shareholder'), ('INTERCOMPANY', 'Intercompany')], db_index=True, help_text='Classifies the party (e.g., Customer, Supplier). Important for determining control accounts and reporting.', max_length=20, verbose_name='Party Type')),
                ('name', models.CharField(db_index=True, help_text="Name of the party (e.g., Company Name or Individual's Full Name).", max_length=255, verbose_name='Party Name')),
                ('contact_email', models.EmailField(blank=True, help_text='Primary contact email address.', max_length=254, null=True, validators=[django.core.validators.EmailValidator()], verbose_name='Contact Email')),
                ('contact_phone', models.CharField(blank=True, help_text='Primary contact phone number.', max_length=20, null=True, validators=[django.core.validators.RegexValidator('^\\+?1?\\d{9,19}$', message='Enter a valid phone number (e.g., +12125552368).')], verbose_name='Contact Phone')),
                ('address', models.TextField(blank=True, help_text='Full postal address.', null=True, verbose_name='Address')),
                ('credit_limit', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Maximum credit amount extended to this party (typically for Customers). 0 means no limit set (or no credit).', max_digits=15, verbose_name='Credit Limit')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Inactive parties cannot be selected for new transactions.', verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('control_account', models.ForeignKey(blank=True, help_text="The specific Account in the COA that summarizes this party's balance (e.g., Accounts Receivable for Customers). Required for balance calculation.", null=True, on_delete=django.db.models.deletion.PROTECT, related_name='controlled_parties', to='crp_accounting.account', verbose_name='Control Account')),
            ],
            options={
                'verbose_name': 'Party',
                'verbose_name_plural': 'Parties',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Voucher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(db_index=True, default=django.utils.timezone.now, help_text='Date the transaction occurred or is recorded')),
                ('effective_date', models.DateField(blank=True, db_index=True, help_text='Date for reporting/aging (e.g., Due Date). Defaults to transaction date if blank.', null=True)),
                ('voucher_number', models.CharField(blank=True, db_index=True, editable=False, help_text='System-generated unique voucher number (e.g., JV-24Q1-0001)', max_length=50)),
                ('reference', models.CharField(blank=True, help_text='Optional external reference (e.g., invoice no, vendor bill no)', max_length=100, null=True)),
                ('narration', models.TextField(help_text='Overall description or reason for the transaction')),
                ('voucher_type', models.CharField(choices=[('GENERAL', 'General Voucher'), ('SALES', 'Sales Voucher'), ('PURCHASE', 'Purchase Voucher'), ('RECEIPT', 'Receipt Voucher'), ('PAYMENT', 'Payment Voucher'), ('CONTRA', 'Contra Voucher'), ('DEBIT_NOTE', 'Debit Note'), ('CREDIT_NOTE', 'Credit Note'), ('STOCK_JOURNAL', 'Stock Journal'), ('DEPRECIATION', 'Depreciation')], db_index=True, default='GENERAL', help_text='Classifies the entry type for reporting and workflow.', max_length=20)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('PENDING_APPROVAL', 'Pending Approval'), ('POSTED', 'Posted'), ('REJECTED', 'Rejected'), ('CANCELLED', 'Cancelled')], db_index=True, default='DRAFT', help_text='Workflow status of the voucher', max_length=20)),
                ('object_id', models.PositiveIntegerField(blank=True, db_index=True, null=True)),
                ('balances_updated', models.BooleanField(db_index=True, default=False, help_text='Internal flag: True if ledger balances have been updated by the posting task.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('accounting_period', models.ForeignKey(help_text='The accounting period this voucher belongs to.', on_delete=django.db.models.deletion.PROTECT, related_name='vouchers', to='crp_accounting.accountingperiod')),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='vouchers', to='contenttypes.contenttype')),
                ('party', models.ForeignKey(blank=True, help_text='Associated Party (Customer, Vendor), if applicable', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='vouchers', to='crp_accounting.party')),
            ],
            options={
                'verbose_name': 'Voucher',
                'verbose_name_plural': 'Vouchers',
                'ordering': ['-date', '-voucher_number'],
                'permissions': [('submit_voucher', 'Can submit voucher for approval'), ('approve_voucher', 'Can approve voucher for posting'), ('reject_voucher', 'Can reject voucher during approval'), ('reverse_voucher', 'Can create reversing voucher entries'), ('post_voucher', 'Can post vouchers directly'), ('delete_draft_voucher', 'Can delete draft/rejected vouchers')],
            },
        ),
        migrations.CreateModel(
            name='VoucherApproval',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_timestamp', models.DateTimeField(default=django.utils.timezone.now, help_text='When the action was performed')),
                ('action_type', models.CharField(choices=[('SUBMITTED', 'Submitted'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected'), ('CANCELLED', 'Cancelled'), ('COMMENTED', 'Commented'), ('REASSIGNED', 'Reassigned'), ('FORWARDED', 'Forwarded'), ('EDITED', 'Edited')], db_index=True, help_text='The type of workflow action taken', max_length=20)),
                ('from_status', models.CharField(blank=True, choices=[('DRAFT', 'Draft'), ('PENDING_APPROVAL', 'Pending Approval'), ('POSTED', 'Posted'), ('REJECTED', 'Rejected'), ('CANCELLED', 'Cancelled')], help_text='Status before this action', max_length=20, null=True)),
                ('to_status', models.CharField(blank=True, choices=[('DRAFT', 'Draft'), ('PENDING_APPROVAL', 'Pending Approval'), ('POSTED', 'Posted'), ('REJECTED', 'Rejected'), ('CANCELLED', 'Cancelled')], help_text='Status after this action (if changed)', max_length=20, null=True)),
                ('comments', models.TextField(blank=True, help_text='Optional comments provided by the user')),
                ('user', models.ForeignKey(help_text='The user who performed the action', on_delete=django.db.models.deletion.PROTECT, related_name='voucher_approval_actions', to=settings.AUTH_USER_MODEL)),
                ('voucher', models.ForeignKey(help_text='The voucher this action relates to', on_delete=django.db.models.deletion.CASCADE, related_name='approvals', to='crp_accounting.voucher')),
            ],
            options={
                'verbose_name': 'Voucher Approval Log',
                'verbose_name_plural': 'Voucher Approval Logs',
                'ordering': ['action_timestamp'],
            },
        ),
        migrations.CreateModel(
            name='VoucherLine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dr_cr', models.CharField(choices=[('DEBIT', 'Dr'), ('CREDIT', 'Cr')], help_text='Specifies if this is a debit or credit', max_length=6)),
                ('amount', models.DecimalField(decimal_places=2, help_text='Amount debited or credited (always positive)', max_digits=20)),
                ('narration', models.TextField(blank=True, help_text='Optional description for this specific line')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('account', models.ForeignKey(help_text='Account from the Chart of Accounts', on_delete=django.db.models.deletion.PROTECT, related_name='voucher_lines', to='crp_accounting.account')),
                ('voucher', models.ForeignKey(help_text='The voucher this line belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='crp_accounting.voucher')),
            ],
            options={
                'verbose_name': 'Voucher Line',
                'verbose_name_plural': 'Voucher Lines',
                'ordering': ['pk'],
            },
        ),
        migrations.CreateModel(
            name='VoucherSequence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('voucher_type', models.CharField(choices=[('GENERAL', 'General Voucher'), ('SALES', 'Sales Voucher'), ('PURCHASE', 'Purchase Voucher'), ('RECEIPT', 'Receipt Voucher'), ('PAYMENT', 'Payment Voucher'), ('CONTRA', 'Contra Voucher'), ('DEBIT_NOTE', 'Debit Note'), ('CREDIT_NOTE', 'Credit Note'), ('STOCK_JOURNAL', 'Stock Journal'), ('DEPRECIATION', 'Depreciation')], help_text='The type of voucher this sequence is for.', max_length=20)),
                ('prefix', models.CharField(blank=True, help_text='Configurable prefix for the voucher number.', max_length=20)),
                ('padding_digits', models.PositiveSmallIntegerField(default=4, help_text='Number of digits for the sequential number (e.g., 4 -> 0001).')),
                ('last_number', models.PositiveIntegerField(default=0, help_text='The last sequential number used for this type/period.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('accounting_period', models.ForeignKey(help_text='The accounting period this sequence applies to.', on_delete=django.db.models.deletion.CASCADE, to='crp_accounting.accountingperiod')),
            ],
            options={
                'verbose_name': 'Voucher Sequence',
                'verbose_name_plural': 'Voucher Sequences',
                'ordering': ['accounting_period__start_date', 'voucher_type'],
            },
        ),
        migrations.AddIndex(
            model_name='account',
            index=models.Index(fields=['account_type'], name='crp_account_account_1285b4_idx'),
        ),
        migrations.AddIndex(
            model_name='account',
            index=models.Index(fields=['pl_section'], name='crp_account_pl_sect_7aff54_idx'),
        ),
        migrations.AddIndex(
            model_name='account',
            index=models.Index(fields=['is_active', 'allow_direct_posting'], name='crp_account_is_acti_911f5c_idx'),
        ),
        migrations.AddIndex(
            model_name='account',
            index=models.Index(fields=['is_control_account', 'control_account_party_type'], name='crp_account_is_cont_cf4ca7_idx'),
        ),
        migrations.AddConstraint(
            model_name='account',
            constraint=models.CheckConstraint(condition=models.Q(('is_control_account', False), ('control_account_party_type__isnull', False), _connector='OR'), name='control_account_requires_party_type', violation_error_message='Control accounts must specify a Control Account Party Type.'),
        ),
        migrations.AddConstraint(
            model_name='account',
            constraint=models.CheckConstraint(condition=models.Q(('is_control_account', True), ('control_account_party_type__isnull', True), _connector='OR'), name='party_type_requires_control_account', violation_error_message='Control Account Party Type can only be set on Control Accounts.'),
        ),
        migrations.AddConstraint(
            model_name='party',
            constraint=models.CheckConstraint(condition=models.Q(('credit_limit__gte', Decimal('0.00'))), name='party_credit_limit_non_negative', violation_error_message='Credit limit cannot be negative.'),
        ),
        migrations.AddIndex(
            model_name='voucher',
            index=models.Index(fields=['content_type', 'object_id'], name='crp_account_content_a94eec_idx'),
        ),
        migrations.AddIndex(
            model_name='voucher',
            index=models.Index(fields=['status', 'accounting_period'], name='crp_account_status_09200c_idx'),
        ),
        migrations.AddIndex(
            model_name='voucherapproval',
            index=models.Index(fields=['voucher', 'action_timestamp'], name='crp_account_voucher_944f0c_idx'),
        ),
        migrations.AddIndex(
            model_name='voucherline',
            index=models.Index(fields=['voucher', 'account'], name='crp_account_voucher_c31c4a_idx'),
        ),
        migrations.AddIndex(
            model_name='voucherline',
            index=models.Index(fields=['voucher', 'dr_cr'], name='crp_account_voucher_c9cf53_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='vouchersequence',
            unique_together={('voucher_type', 'accounting_period')},
        ),
    ]
